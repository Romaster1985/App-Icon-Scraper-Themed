name: Android Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Check for existing icons
      id: check_icons
      run: |
        echo "Verificando iconos existentes..."
        
        # Lista de archivos de iconos requeridos
        required_icons=(
          "ic_launcher.png"
          "ic_launcher_round.png" 
          "ic_launcher_foreground.png"
          "ic_launcher_background.png"
        )
        
        # Lista de densidades a verificar (solo las necesarias para build)
        densities=(
          "mipmap-xxxhdpi"
          "mipmap-xxhdpi" 
          "mipmap-xhdpi"
          "mipmap-hdpi"
          "mipmap-mdpi"
        )
        
        missing_icons=false
        
        for density in "${densities[@]}"; do
          for icon in "${required_icons[@]}"; do
            icon_path="app/src/main/res/${density}/${icon}"
            if [ ! -f "$icon_path" ]; then
              echo "‚ùå Icono faltante: $icon_path"
              missing_icons=true
            else
              echo "‚úÖ Icono encontrado: $icon_path"
            fi
          done
        done
        
        if [ "$missing_icons" = true ]; then
          echo "icons_exist=false" >> $GITHUB_OUTPUT
          echo "Se requieren generar iconos nuevos"
        else
          echo "icons_exist=true" >> $GITHUB_OUTPUT
          echo "Todos los iconos existen, se utilizar√°n los existentes"
        fi

    - name: Install ImageMagick for icon generation
      if: steps.check_icons.outputs.icons_exist == 'false'
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick

    - name: Generate professional app icons with larger text
      if: steps.check_icons.outputs.icons_exist == 'false'
      run: |
        # Crear estructura de directorios (solo si no existen)
        mkdir -p app/src/main/res/mipmap-hdpi
        mkdir -p app/src/main/res/mipmap-mdpi
        mkdir -p app/src/main/res/mipmap-xhdpi
        mkdir -p app/src/main/res/mipmap-xxhdpi
        mkdir -p app/src/main/res/mipmap-xxxhdpi

        echo "Generando iconos profesionales para App Icon Scraper..."

        # Colores del tema
        PRIMARY="#2196F3"
        PRIMARY_DARK="#1976D2"
        ACCENT="#FF4081"
        WHITE="#FFFFFF"

        # Tama√±os para cada densidad
        declare -A sizes=(
          ["mdpi"]=48
          ["hdpi"]=72  
          ["xhdpi"]=96
          ["xxhdpi"]=144
          ["xxxhdpi"]=192
        )

        # Generar iconos para cada densidad
        for density in "${!sizes[@]}"; do
          size=${sizes[$density]}
          folder="app/src/main/res/mipmap-${density}"
          
          echo "Generando iconos para $density (${size}x${size})..."

          # Solo generar iconos si no existen
          if [ ! -f "${folder}/ic_launcher.png" ]; then
            # Icono principal (cuadrado con dise√±o moderno) - TEXTO M√ÅS GRANDE
            convert -size "${size}x${size}" \
              gradient:"${PRIMARY}-${PRIMARY_DARK}" \
              -fill "$WHITE" \
              -gravity center \
              -pointsize $((size/3)) \
              -font Arial \
              -annotate +0+0 "üì±" \
              -fill "$WHITE" \
              -gravity south \
              -pointsize $((size/6)) \
              -annotate +0+$((size/12)) "AIS" \
              "${folder}/ic_launcher.png"
          fi

          if [ ! -f "${folder}/ic_launcher_round.png" ]; then
            # Icono redondeado - TEXTO M√ÅS GRANDE
            convert -size "${size}x${size}" \
              gradient:"${PRIMARY}-${PRIMARY_DARK}" \
              -fill "$WHITE" \
              -gravity center \
              -pointsize $((size/3)) \
              -font Arial \
              -annotate +0+0 "üì±" \
              -fill "$WHITE" \
              -gravity south \
              -pointsize $((size/6)) \
              -annotate +0+$((size/12)) "AIS" \
              \( +clone -alpha extract -draw "circle $((size/2)),$((size/2)) $((size/2)),0" \) \
              -alpha off -compose CopyOpacity -composite \
              "${folder}/ic_launcher_round.png"
          fi

          if [ ! -f "${folder}/ic_launcher_foreground.png" ]; then
            # Icono foreground para adaptive icons (Android 8.0+) - TEXTO M√ÅS GRANDE
            convert -size "${size}x${size}" \
              xc:none \
              -fill "$WHITE" \
              -gravity center \
              -pointsize $((size/2)) \
              -font Arial \
              -annotate +0+0 "üì±" \
              "${folder}/ic_launcher_foreground.png"
          fi

          if [ ! -f "${folder}/ic_launcher_background.png" ]; then
            # Icono background para adaptive icons
            convert -size "${size}x${size}" \
              gradient:"${PRIMARY}-${PRIMARY_DARK}" \
              "${folder}/ic_launcher_background.png"
          fi
        done

        echo "‚úÖ Iconos generados exitosamente para las densidades requeridas"

    - name: Create additional UI assets
      run: |
        # Crear algunos assets adicionales para la UI
        mkdir -p app/src/main/res/drawable-mdpi
        mkdir -p app/src/main/res/drawable-hdpi
        mkdir -p app/src/main/res/drawable-xhdpi
        mkdir -p app/src/main/res/drawable-xxhdpi

        # Solo generar badges si no existen
        if [ ! -f "app/src/main/res/drawable-mdpi/badge_system.png" ]; then
          # Badge para apps de sistema (punto azul)
          convert -size 24x24 xc:none -fill "#2196F3" -draw "circle 12,12 12,2" app/src/main/res/drawable-mdpi/badge_system.png
          convert -size 36x36 xc:none -fill "#2196F3" -draw "circle 18,18 18,3" app/src/main/res/drawable-hdpi/badge_system.png
          convert -size 48x48 xc:none -fill "#2196F3" -draw "circle 24,24 24,4" app/src/main/res/drawable-xhdpi/badge_system.png
        fi

        if [ ! -f "app/src/main/res/drawable-mdpi/badge_google.png" ]; then
          # Badge para Google Apps (punto rojo)
          convert -size 24x24 xc:none -fill "#FF4081" -draw "circle 12,12 12,2" app/src/main/res/drawable-mdpi/badge_google.png
          convert -size 36x36 xc:none -fill "#FF4081" -draw "circle 18,18 18,3" app/src/main/res/drawable-hdpi/badge_google.png
          convert -size 48x48 xc:none -fill "#FF4081" -draw "circle 24,24 24,4" app/src/main/res/drawable-xhdpi/badge_google.png
        fi

        echo "‚úÖ Assets de UI verificados/generados"

    - name: Verify generated icons
      run: |
        echo "Verificando estructura de iconos:"
        find app/src/main/res -name "*.png" | sort
        echo "‚úÖ Estructura de iconos verificada"

    - name: Setup Android SDK
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34"

    - name: Change wrapper permissions
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: |
        ./gradlew clean
        ./gradlew assembleDebug --stacktrace

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-icon-scraper
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 7

    - name: Upload generated icons report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: generated-icons-report
        path: app/src/main/res/
        retention-days: 1